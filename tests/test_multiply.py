# Generated by primary model: moonshotai/kimi-k2:free
import pytest
from multiply import multiply_numbers


class TestMultiplyNumbers:
    """Comprehensive test suite for multiply_numbers function"""
    
    def test_multiply_positive_integers(self):
        """Test multiplication of positive integers"""
        assert multiply_numbers(3, 4) == 12
        assert multiply_numbers(100, 5) == 500
        assert multiply_numbers(1, 1) == 1
        assert multiply_numbers(999, 999) == 998001
    
    def test_multiply_negative_integers(self):
        """Test multiplication of negative integers"""
        assert multiply_numbers(-3, 4) == -12
        assert multiply_numbers(3, -4) == -12
        assert multiply_numbers(-3, -4) == 12
        assert multiply_numbers(-100, 0) == 0
    
    def test_multiply_zero_with_integers(self):
        """Test multiplication with zero"""
        assert multiply_numbers(0, 5) == 0
        assert multiply_numbers(5, 0) == 0
        assert multiply_numbers(0, 0) == 0
        assert multiply_numbers(-5, 0) == 0
    
    def test_multiply_floating_point_numbers(self):
        """Test multiplication with floating point numbers"""
        assert multiply_numbers(2.5, 4) == pytest.approx(10.0, rel=1e-9)
        assert multiply_numbers(3.3, 2.2) == pytest.approx(7.26, rel=1e-9)
        assert multiply_numbers(-2.5, -4.0) == pytest.approx(10.0, rel=1e-9)
        assert multiply_numbers(0.1, 0.2) == pytest.approx(0.02, rel=1e-9)
        assert multiply_numbers(1e-10, 1e-10) == pytest.approx(1e-20, rel=1e-9)
        assert multiply_numbers(1e308, 1e308) == pytest.approx(float('inf'))
    
    def test_multiply_mixed_types_int_float(self):
        """Test multiplication between int and float"""
        assert multiply_numbers(5, 2.5) == pytest.approx(12.5, rel=1e-9)
        assert multiply_numbers(2.5, 5) == pytest.approx(12.5, rel=1e-9)
        assert multiply_numbers(-3, 4.5) == pytest.approx(-13.5, rel=1e-9)
    
    def test_multiply_booleans(self):
        """Test multiplication with boolean values (True=1, False=0)"""
        assert multiply_numbers(True, 5) == 5
        assert multiply_numbers(False, 5) == 0
        assert multiply_numbers(True, True) == 1
        assert multiply_numbers(False, False) == 0
        assert multiply_numbers(True, 3.14) == pytest.approx(3.14, rel=1e-9)
        assert multiply_numbers(False, 3.14) == pytest.approx(0.0, rel=1e-9)
    
    def test_string_repetition_with_int(self):
        """Test string multiplied by integer (string repetition)"""
        assert multiply_numbers('a', 3) == 'aaa'
        assert multiply_numbers(3, 'a') == 'aaa'
        assert multiply_numbers('hello', 2) == 'hellohello'
        assert multiply_numbers('test', 0) == ''
        assert multiply_numbers('x', 1) == 'x'
        assert multiply_numbers('', 5) == ''
        assert multiply_numbers('abc', -3) == ''
    
    def test_string_repetition_limits(self):
        """Test string repetition with large numbers"""
        assert multiply_numbers('a', 999) == 'a' * 999
        assert len(multiply_numbers('large', 10000)) == 50000
    
    def test_list_repetition_with_int(self):
        """Test list multiplied by integer (list repetition)"""
        assert multiply_numbers([1, 2], 3) == [1, 2, 1, 2, 1, 2]
        assert multiply_numbers(3, [1, 2]) == [1, 2, 1, 2, 1, 2]
        assert multiply_numbers(['a', 'b'], 2) == ['a', 'b', 'a', 'b']
        assert multiply_numbers([], 5) == []
        assert multiply_numbers([1], 0) == []
        assert multiply_numbers([None], 3) == [None, None, None]
        assert multiply_numbers([1, 2, 3], -1) == []
    
    def test_tuple_repetition_with_int(self):
        """Test tuple multiplied by integer (tuple repetition)"""
        assert multiply_numbers((1, 2), 3) == (1, 2, 1, 2, 1, 2)
        assert multiply_numbers(2, (1, 2)) == (1, 2, 1, 2)
        assert multiply_numbers((), 3) == ()
        assert multiply_numbers((1,), 0) == ()
        
    def test_none_multiplication_raises_type_error(self):
        """Test that None multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(None, 5)
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'NoneType' and 'int'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(5, None)
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'int' and 'NoneType'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(None, None)
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'NoneType' and 'NoneType'"
    
    def test_dict_multiplication_raises_type_error(self):
        """Test that dict multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers({}, 3)
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'dict' and 'int'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(3, {})
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'int' and 'dict'"
    
    def test_set_multiplication_raises_type_error(self):
        """Test that set multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers({1, 2, 3}, 2)
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'set' and 'int'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(2, {1, 2, 3})
        assert str(exc_info.value) == "unsupported operand type(s) for *: 'int' and 'set'"
    
    def test_string_by_string_raises_type_error(self):
        """Test that string by string multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers('hello', 'world')
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'str'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers('hello', '5')
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'str'"
    
    def test_string_by_float_raises_type_error(self):
        """Test that string by float multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers('hello', 3.5)
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'float'"
        
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers(3.5, 'hello')
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'float'"
    
    def test_list_by_list_raises_type_error(self):
        """Test that list by list multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers([1, 2], [3, 4])
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'list'"
    
    def test_list_by_float_raises_type_error(self):
        """Test that list by float multiplication raises TypeError with exact message"""
        with pytest.raises(TypeError) as exc_info:
            multiply_numbers([1, 2], 2.5)
        assert str(exc_info.value) == "can't multiply sequence by non-int of type 'float'"
    
    def test_complex_numbers(self):
        """Test multiplication with complex numbers"""
        assert multiply_numbers(2+3j, 4) == 8+12j
        assert multiply_numbers(2+3j, 1+2j) == (2+3j)*(1+2j)
        assert multiply_numbers(1j, 1j) == -1+0j
    
    def test_bytearray_repetition(self):
        """Test bytearray repetition with int"""
        assert multiply_numbers(bytearray(b'abc'), 2) == bytearray(b'abcabc')
        assert multiply_numbers(2, bytearray(b'x')) == bytearray(b'xx')
    
    def test_bytes_repetition(self):
        """Test bytes repetition with int"""
        assert multiply_numbers(b'hello', 2) == b'hellohello'
        assert multiply_numbers(3, b'a') == b'aaa'