# Generated by fallback model: openai/gpt-4o-mini
import pytest
from multiply import multiply_numbers

def test_multiply_numbers_with_integers():
    """Test multiplication of two integers."""
    assert multiply_numbers(2, 3) == 6
    assert multiply_numbers(-2, 3) == -6
    assert multiply_numbers(0, 3) == 0

def test_multiply_numbers_with_floats():
    """Test multiplication of two floats."""
    assert multiply_numbers(2.0, 3.0) == pytest.approx(6.0, rel=1e-9)
    assert multiply_numbers(-2.0, 3.0) == pytest.approx(-6.0, rel=1e-9)
    assert multiply_numbers(0.0, 3.0) == pytest.approx(0.0, rel=1e-9)

def test_multiply_numbers_with_strings():
    """Test multiplication of string by integer (string repetition)."""
    assert multiply_numbers("abc", 3) == "abcabcabc"
    assert multiply_numbers("", 3) == ""
    assert multiply_numbers("abc", 0) == ""

def test_multiply_numbers_with_lists():
    """Test multiplication of list by integer (list repetition)."""
    assert multiply_numbers([1, 2], 3) == [1, 2, 1, 2, 1, 2]
    assert multiply_numbers([], 3) == []
    assert multiply_numbers([1, 2], 0) == []

def test_multiply_numbers_with_booleans():
    """Test multiplication of boolean values."""
    assert multiply_numbers(True, 3) == 3
    assert multiply_numbers(False, 3) == 0
    assert multiply_numbers(True, 2.5) == pytest.approx(2.5, rel=1e-9)
    assert multiply_numbers(False, 2.5) == 0

def test_multiply_numbers_with_none():
    """Test multiplication involving None (should raise TypeError)."""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(None, 3)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'NoneType' and 'int'"
    
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(3, None)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'int' and 'NoneType'"

def test_multiply_numbers_with_dicts():
    """Test multiplication involving dict (should raise TypeError)."""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers({}, 3)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'dict' and 'int'"
    
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(3, {})
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'int' and 'dict'"

def test_multiply_numbers_with_lists_and_floats():
    """Test multiplication of list by float (invalid operation, should raise TypeError)."""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers([1, 2], 2.5)
    assert str(excinfo.value) == "can't multiply sequence by non-int of type 'float'"