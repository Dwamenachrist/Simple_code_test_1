# Generated by fallback model: openai/gpt-4o-mini
import pytest
from multiply import multiply_numbers

def test_multiply_numbers_with_integers():
    """Test multiplication of two integers."""
    assert multiply_numbers(2, 3) == 6
    assert multiply_numbers(-2, 3) == -6
    assert multiply_numbers(0, 5) == 0

def test_multiply_numbers_with_floats():
    """Test multiplication of two floats."""
    assert multiply_numbers(2.5, 4.0) == pytest.approx(10.0, rel=1e-9)
    assert multiply_numbers(-1.5, 2.0) == pytest.approx(-3.0, rel=1e-9)
    assert multiply_numbers(0.0, 5.5) == pytest.approx(0.0, rel=1e-9)

def test_multiply_numbers_with_strings():
    """Test multiplication of string with integer."""
    assert multiply_numbers('abc', 3) == 'abcabcabc'
    assert multiply_numbers('', 5) == ''
    
def test_multiply_numbers_with_lists():
    """Test multiplication of list with integer."""
    assert multiply_numbers([1, 2], 3) == [1, 2, 1, 2, 1, 2]
    assert multiply_numbers([], 4) == []
    
def test_multiply_numbers_with_booleans():
    """Test multiplication of boolean with integer."""
    assert multiply_numbers(True, 5) == 5
    assert multiply_numbers(False, 10) == 0

def test_multiply_numbers_with_none():
    """Test multiplication when one argument is None."""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(None, 5)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'NoneType' and 'int'"
    
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(5, None)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'int' and 'NoneType'"

def test_multiply_numbers_with_dict():
    """Test multiplication of dict with integer, expecting TypeError."""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers({}, 5)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'dict' and 'int'"

def test_multiply_numbers_with_float_and_int():
    """Test multiplication of float and integer."""
    assert multiply_numbers(3.0, 4) == pytest.approx(12.0, rel=1e-9)
    
def test_multiply_numbers_with_large_values():
    """Test multiplication of large integers."""
    assert multiply_numbers(10**6, 10**6) == 10**12
    assert multiply_numbers(-10**6, 10**6) == -10**12

def test_multiply_numbers_with_edge_cases():
    """Test edge cases such as multiplying by 1 and -1."""
    assert multiply_numbers(1, 999999) == 999999
    assert multiply_numbers(-1, 999999) == -999999
    assert multiply_numbers(0, 1) == 0

def test_multiply_numbers_with_floating_point_edge_cases():
    """Test edge cases with floating points."""
    assert multiply_numbers(1.0, 0) == pytest.approx(0.0, rel=1e-9)
    assert multiply_numbers(0.0, 0.0) == pytest.approx(0.0, rel=1e-9)

def test_multiply_numbers_with_negative_edge_cases():
    """Test multiplication with negative numbers."""
    assert multiply_numbers(-3, -3) == 9
    assert multiply_numbers(-2, -2.5) == pytest.approx(5.0, rel=1e-9)