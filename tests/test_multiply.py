# Generated by fallback model: openai/gpt-4o-mini
import pytest
from multiply import multiply_numbers

def test_multiply_two_positive_integers():
    """Test multiplication of two positive integers."""
    assert multiply_numbers(3, 4) == 12

def test_multiply_positive_and_zero():
    """Test multiplication of a positive integer and zero."""
    assert multiply_numbers(5, 0) == 0

def test_multiply_two_negative_integers():
    """Test multiplication of two negative integers."""
    assert multiply_numbers(-2, -3) == 6

def test_multiply_negative_and_positive():
    """Test multiplication of a negative integer and a positive integer."""
    assert multiply_numbers(-3, 5) == -15

def test_multiply_two_floats():
    """Test multiplication of two floats."""
    assert multiply_numbers(2.5, 4.2) == 10.5

def test_multiply_integer_and_float():
    """Test multiplication of an integer and a float."""
    assert multiply_numbers(3, 2.5) == 7.5

def test_multiply_large_integers():
    """Test multiplication of two very large integers."""
    assert multiply_numbers(10**10, 10**10) == 10**20

def test_multiply_small_float_and_large_integer():
    """Test multiplication of a very small float with a large integer."""
    assert multiply_numbers(1e-10, 1e10) == 1.0

def test_multiply_with_positive_infinity():
    """Test multiplication with positive infinity."""
    assert multiply_numbers(5, float('inf')) == float('inf')

def test_multiply_with_negative_infinity():
    """Test multiplication with negative infinity."""
    assert multiply_numbers(-5, float('-inf')) == float('inf')

def test_multiply_nan_with_number():
    """Test multiplication of NaN with a number."""
    assert multiply_numbers(float('nan'), 5) != multiply_numbers(float('nan'), 5)

def test_multiply_string_with_integer():
    """Test multiplication of a string with an integer."""
    with pytest.raises(TypeError):
        multiply_numbers('five', 3)

def test_multiply_none_with_number():
    """Test multiplication of None with a number."""
    with pytest.raises(TypeError):
        multiply_numbers(None, 4)

def test_multiply_list_with_number():
    """Test multiplication of a list with a number."""
    with pytest.raises(TypeError):
        multiply_numbers([1, 2], 2)

def test_multiply_two_strings():
    """Test multiplication of two strings."""
    with pytest.raises(TypeError):
        multiply_numbers('2', '3')