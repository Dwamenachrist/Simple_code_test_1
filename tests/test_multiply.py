# Generated by fallback model: openai/gpt-4o-mini
import pytest
from multiply import multiply_numbers

def test_multiply_integers():
    """Test multiplying two integers"""
    assert multiply_numbers(2, 3) == 6
    assert multiply_numbers(-2, 3) == -6
    assert multiply_numbers(0, 5) == 0

def test_multiply_floats():
    """Test multiplying two floats"""
    assert multiply_numbers(2.0, 3.0) == pytest.approx(6.0, rel=1e-9)
    assert multiply_numbers(-2.5, 4.0) == pytest.approx(-10.0, rel=1e-9)
    assert multiply_numbers(0.0, 5.5) == pytest.approx(0.0, rel=1e-9)

def test_multiply_string_and_int():
    """Test multiplying a string by an integer"""
    assert multiply_numbers("Hello", 3) == "HelloHelloHello"
    assert multiply_numbers("A", 0) == ""
    assert multiply_numbers("", 5) == ""

def test_multiply_list_and_int():
    """Test multiplying a list by an integer"""
    assert multiply_numbers([1, 2], 3) == [1, 2, 1, 2, 1, 2]
    assert multiply_numbers([], 4) == []
    
def test_multiply_bool_and_int():
    """Test multiplying a boolean and an integer"""
    assert multiply_numbers(True, 5) == 5
    assert multiply_numbers(False, 10) == 0

def test_multiply_none_and_int():
    """Test multiplying None with an integer raises TypeError"""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers(None, 5)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'NoneType' and 'int'"

def test_multiply_dict_and_int():
    """Test multiplying a dictionary raises TypeError"""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers({'a': 1}, 5)
    assert str(excinfo.value) == "unsupported operand type(s) for *: 'dict' and 'int'"

def test_multiply_float_and_int():
    """Test multiplying float and integer"""
    assert multiply_numbers(2.0, 3) == pytest.approx(6.0, rel=1e-9)
    assert multiply_numbers(4, 1.5) == pytest.approx(6.0, rel=1e-9)

def test_multiply_float_and_string():
    """Test multiplying a string by a float raises TypeError"""
    with pytest.raises(TypeError) as excinfo:
        multiply_numbers("Hello", 1.5)
    assert str(excinfo.value) == "can't multiply sequence by non-int of type 'float'"