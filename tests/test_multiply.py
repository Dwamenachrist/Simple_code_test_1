# Generated by moonshotai/kimi-k2
# Generated by moonshotai/kimi-k2

import pytest
import math
from multiply import multiply_numbers


def test_multiply_numbers_both_positive_integers():
    """Test multiplication of two positive integers."""
    assert multiply_numbers(3, 4) == 12


def test_multiply_numbers_positive_and_negative_integers():
    """Test multiplication of positive and negative integers."""
    assert multiply_numbers(5, -3) == -15


def test_multiply_numbers_both_negative_integers():
    """Test multiplication of two negative integers."""
    assert multiply_numbers(-4, -6) == 24


def test_multiply_numbers_with_zero():
    """Test multiplication by zero."""
    assert multiply_numbers(0, 7) == 0
    assert multiply_numbers(7, 0) == 0
    assert multiply_numbers(0, 0) == 0


def test_multiply_numbers_positive_floats():
    """Test multiplication of positive floating-point numbers."""
    assert multiply_numbers(2.5, 4.2) == pytest.approx(10.5, rel=1e-9)


def test_multiply_numbers_mixed_int_and_float():
    """Test multiplication of integer and float."""
    assert multiply_numbers(3, 2.5) == pytest.approx(7.5, rel=1e-9)
    assert multiply_numbers(2.5, 3) == pytest.approx(7.5, rel=1e-9)


def test_multiply_numbers_negative_floats():
    """Test multiplication of negative floating-point numbers."""
    assert multiply_numbers(-2.5, -4.2) == pytest.approx(10.5, rel=1e-9)


def test_multiply_numbers_string_repeated_by_int():
    """Test string multiplied by integer."""
    assert multiply_numbers("hi", 3) == "hihihi"
    assert multiply_numbers(3, "hi") == "hihihi"


def test_multiply_numbers_list_repeated_by_int():
    """Test list multiplied by integer."""
    assert multiply_numbers([1, 2, 3], 2) == [1, 2, 3, 1, 2, 3]
    assert multiply_numbers(3, [1]) == [1, 1, 1]


def test_multiply_numbers_tuple_repeated_by_int():
    """Test tuple multiplied by integer."""
    assert multiply_numbers((1, 2), 3) == (1, 2, 1, 2, 1, 2)
    assert multiply_numbers(2, ("a", "b")) == ("a", "b", "a", "b")


def test_multiply_numbers_large_integers():
    """Test multiplication of very large integers."""
    assert multiply_numbers(10**10, 10**5) == 10**15


def test_multiply_numbers_very_small_floats():
    """Test multiplication of very small floating-point numbers."""
    assert multiply_numbers(1e-100, 1e-200) == pytest.approx(1e-300, rel=1e-9)


def test_multiply_numbers_infinity_cases():
    """Test multiplication involving infinity."""
    assert multiply_numbers(float('inf'), 1) == float('inf')
    assert multiply_numbers(float('-inf'), 1) == float('-inf')
    assert multiply_numbers(float('inf'), -1) == float('-inf')
    assert multiply_numbers(float('-inf'), -1) == float('inf')
    assert math.isnan(multiply_numbers(0.0, float('inf')))
    assert math.isnan(multiply_numbers(float('inf'), 0.0))


def test_multiply_numbers_nan_values():
    """Test multiplication involving NaN."""
    assert math.isnan(multiply_numbers(float('nan'), 5))
    assert math.isnan(multiply_numbers(5, float('nan')))
    assert math.isnan(multiply_numbers(float('nan'), float('nan')))


def test_multiply_numbers_string_string_error():
    """Test string * string raises TypeError."""
    with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'str'"):
        multiply_numbers("hello", "world")


def test_multiply_numbers_none_with_int_error():
    """Test None * int raises TypeError."""
    with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'NoneType' and 'int'"):
        multiply_numbers(None, 5)


def test_multiply_numbers_int_with_none_error():
    """Test int * None raises TypeError."""
    with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'int' and 'NoneType'"):
        multiply_numbers(5, None)


def test_multiply_numbers_none_with_float_error():
    """Test None * float raises TypeError."""
    with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'NoneType' and 'float'"):
        multiply_numbers(None, 3.14)


def test_multiply_numbers_none_with_string_error():
    """Test None * string raises TypeError."""
    with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'NoneType'"):
        multiply_numbers(None, "hello")


def test_multiply_numbers_string_with_float_error():
    """Test string * float raises TypeError."""
    with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
        multiply_numbers("hello", 3.14)


def test_multiply_numbers_list_with_float_error():
    """Test list * float raises TypeError."""
    with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
        multiply_numbers([1, 2, 3], 2.5)


def test_multiply_numbers_dict_with_int_error():
    """Test dict * int raises TypeError."""
    with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'dict' and 'int'"):
        multiply_numbers({"a": 1}, 2)


def test_multiply_numbers_set_with_int_error():
    """Test set * int raises TypeError."""
    with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'set' and 'int'"):
        multiply_numbers({1, 2, 3}, 2)