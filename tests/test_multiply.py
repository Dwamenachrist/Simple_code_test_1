# Generated by primary model: moonshotai/kimi-k2
import pytest
from multiply import multiply_numbers


class TestMultiplyNumbers:
    """Comprehensive test suite for multiply_numbers function"""

    def test_integer_multiplication(self):
        """Test multiplication of integers"""
        assert multiply_numbers(0, 0) == 0
        assert multiply_numbers(5, 3) == 15
        assert multiply_numbers(-5, 3) == -15
        assert multiply_numbers(5, -3) == -15
        assert multiply_numbers(-5, -3) == 15
        assert multiply_numbers(1000000, 1000000) == 1000000000000

    def test_float_multiplication(self):
        """Test multiplication of floats with pytest.approx()"""
        assert multiply_numbers(2.5, 4.0) == pytest.approx(10.0)
        assert multiply_numbers(3.14159, 2.0) == pytest.approx(6.28318, rel=1e-9)
        assert multiply_numbers(1.1, 1.1) == pytest.approx(1.21, rel=1e-9)
        assert multiply_numbers(-2.5, 4.0) == pytest.approx(-10.0)
        assert multiply_numbers(0.1, 0.2) == pytest.approx(0.02, rel=1e-9)
        assert multiply_numbers(1e-100, 1e-100) == pytest.approx(1e-200, rel=1e-9)
        assert multiply_numbers(1e100, 1e100) == pytest.approx(1e200, rel=1e-9)

    def test_mixed_int_float(self):
        """Test multiplication mixing int and float"""
        assert multiply_numbers(5, 2.5) == pytest.approx(12.5)
        assert multiply_numbers(2.5, 5) == pytest.approx(12.5)
        assert multiply_numbers(0, 3.14159) == pytest.approx(0.0)

    def test_boolean_multiplication(self):
        """Test multiplication with boolean values"""
        # True = 1, False = 0
        assert multiply_numbers(True, 5) == 5
        assert multiply_numbers(False, 5) == 0
        assert multiply_numbers(5, True) == 5
        assert multiply_numbers(5, False) == 0
        assert multiply_numbers(True, True) == 1
        assert multiply_numbers(True, False) == 0
        
    def test_string_with_int(self):
        """Test string * int behavior (string repetition)"""
        assert multiply_numbers("hello", 3) == "hellohellohello"
        assert multiply_numbers("a", 5) == "aaaaa"
        assert multiply_numbers("test", 0) == ""
        assert multiply_numbers("ab", 1) == "ab"
        assert multiply_numbers("", 10) == ""

    def test_string_with_float_raises(self):
        """Test string * float raises TypeError"""
        with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
            multiply_numbers("hello", 2.5)
        with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
            multiply_numbers("hello", -2.5)

    def test_list_with_int(self):
        """Test list * int behavior (list repetition)"""
        assert multiply_numbers([1, 2, 3], 3) == [1, 2, 3, 1, 2, 3, 1, 2, 3]
        assert multiply_numbers(["a", "b"], 2) == ["a", "b", "a", "b"]
        assert multiply_numbers([], 5) == []
        assert multiply_numbers([0], 10) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    def test_list_with_float_raises(self):
        """Test list * float raises TypeError"""
        with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
            multiply_numbers([1, 2], 2.5)

    def test_tuple_with_int(self):
        """Test tuple * int behavior (tuple repetition)"""
        assert multiply_numbers((1, 2), 3) == (1, 2, 1, 2, 1, 2)
        assert multiply_numbers(("a", "b"), 2) == ("a", "b", "a", "b")
        assert multiply_numbers((), 5) == ()

    def test_tuple_with_float_raises(self):
        """Test tuple * float raises TypeError"""
        with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
            multiply_numbers((1, 2), 2.5)

    def test_none_raises_typeerror(self):
        """Test that None raises TypeError with exact message"""
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'NoneType' and 'int'"):
            multiply_numbers(None, 5)
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'int' and 'NoneType'"):
            multiply_numbers(5, None)
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'NoneType' and 'str'"):
            multiply_numbers(None, "test")

    def test_dict_raises_typeerror(self):
        """Test that dict raises TypeError"""
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'dict' and 'int'"):
            multiply_numbers({}, 5)
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'dict' and 'float'"):
            multiply_numbers({"key": "value"}, 2.5)

    def test_set_raises_typeerror(self):
        """Test that set raises TypeError"""
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'set' and 'int'"):
            multiply_numbers({1, 2, 3}, 5)
        with pytest.raises(TypeError, match="unsupported operand type\\(s\\) for \\*: 'int' and 'set'"):
            multiply_numbers(5, {1, 2, 3})

    def test_complex_multiplication(self):
        """Test multiplication of complex numbers"""
        assert multiply_numbers(complex(2, 3), complex(3, 4)) == complex(-6, 17)
        assert multiply_numbers(complex(1, 1), 2) == complex(2, 2)
        assert multiply_numbers(2, complex(1, 1)) == complex(2, 2)

    def test_large_values(self):
        """Test multiplication with large values"""
        assert multiply_numbers(2**31, 2) == 4294967296
        assert multiply_numbers(2**63, 1) == 9223372036854775808
        assert multiply_numbers(float(2**52), 2) == pytest.approx(9007199254740992.0)

    def test_very_small_floats(self):
        """Test multiplication with very small floats"""
        assert multiply_numbers(1e-300, 1e-300) == pytest.approx(1e-600, rel=1e-9)
        assert multiply_numbers(1e-308, 0.1) == pytest.approx(1e-309, rel=1e-9)

    def test_special_float_values(self):
        """Test multiplication with special float values"""
        assert multiply_numbers(float('inf'), 5) == float('inf')
        assert multiply_numbers(-float('inf'), 5) == float('-inf')
        assert multiply_numbers(float('inf'), 0.0) != multiply_numbers(float('inf'), 0.0)  # nan comparison
        assert str(multiply_numbers(float('nan'), 5)) == str(float('nan'))
        assert multiply_numbers(0.0, float('inf')) == float('0.0')
        assert multiply_numbers(0.0, -float('inf')) == float('-0.0')

    def test_bytes_with_int(self):
        """Test bytes * int behavior"""
        assert multiply_numbers(b'hello', 2) == b'hellohello'
        assert multiply_numbers(b'', 3) == b''
        assert multiply_numbers(b'\x00', 5) == b'\x00\x00\x00\x00\x00'

    def test_bytes_with_float_raises(self):
        """Test bytes * float raises TypeError"""
        with pytest.raises(TypeError, match="can't multiply sequence by non-int of type 'float'"):
            multiply_numbers(b'test', 2.5)

    def test_bytearray_with_int(self):
        """Test bytearray * int behavior"""
        assert multiply_numbers(bytearray(b'hi'), 2) == bytearray(b'hihi')
        assert multiply_numbers(bytearray(), 3) == bytearray()
        assert multiply_numbers(bytearray(b'A'), 4) == bytearray(b'AAAA')